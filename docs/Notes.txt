===================
Working with forms
===================

<form> element acts like a container for all the form fields.

All the form elements are going to appear inside the form tags ex:
<form id=''>
<input name='' type=''>
</form>

It's not a good pratice to put a input outside the form.

action='' it's a specific property of form element
<form id='' action=''>
<input name='' type=''>
</form>

=======================
Text Inputs and Labels
=======================

Fields that we can place in the form:
- text related inputs 
- text field: type='text'
- email field: type='email'
- password field: type='password'

In the input the id it's going to be related with the label. 
And label element makes the text related with the text field.

A <label> is a idication of what the field is about. It's related with the  field.
The for='' atribute is equal to the id='' of the input we want to associate. *NOT THE NAME*.

<form id=''>
<label for='1(id of the input)'></label>
<input id='1' name='' type='text'>
</form>

If we are making a email field we should change the type to email. The process of the machine will be more clear. Gives us numbers, symbols and @. Ex:
<label for="email">Email:</label>
<input id='email' type="email" name="email">

Same happens with the password:
type='password' - the characters are masked

Another type of text input but not a input tag:
<textarea id='' name='' rows='' cols=''></textarea>
rows and cols is to set the size of the message boarder.

==================
Other Input Types
==================

Select statement:
<Select> element with options <elements>.

<select name='state' id='state'>
<option value='TX'>Texas</option>
<option value="AK">Alaska</option>
</select>

type='radio'
In the inputs *THE NAMES MUST BE THE SAME*
<input type="radio" name="referrer" id="search-engine"/>
<label for="other" class="lbl-referrer">Other</label>

type='checkbox'
Can check multiples checkboxes
<input type="checkbox" name="terms" id="terms"/>
<label for="terms">I accept the Terms and Conditions</label>

type='submit'
Its a button
<input type="submit" name="submit" id="submit" value="Submit Form"/>

Now we have: 
type='text'
type='email'
type='password'
type='radio'
type='checkbox'
type='submit'
type='number'

======================
Fieldsets and Legends
======================

Grouping the forms: <fieldset></fieldset>
Identifying forms: <legend></legend>

Provide a nice visual effect in the page but also make the page more structurally useful and semantically sound.

=================
Placeholder Text
=================

Text that is placed inside the text elements to serve as placeholders until start typing the text.

<input id="firstname" name="firstname" type="text" placeholder="First Name"/>

When we start typing the text disappear.

========================
Autofocus and Tab Index
========================

Autofocus:
Customize the way the cursor tabs. 
Taping on the information when the page loads

<input id="firstname" name="firstname" autofocus type="text" placeholder="First Name"/>

Tab Index:
If we had two columns or if we want to select something that is not next the first field.

<input id="firstname" name="firstname" autofocus type="text" placeholder="First Name" tabindex="1" />

In the next input we want to select we make tabindex="2" then tabindex="3" and so. We specify what order our fields are going to be highlighted as the user tabs to those fields.

=======================
Client Side Validation
=======================

If the don't want the form to be validated:
<form id="myform" novalidate> 

Required fields: works like autofocus atribute. In the fields that is required we add required to the input.

<input id="firstname" name="firstname" autofocus required type="text" placeholder="First Name" tabindex="1" /> 

Styling a invalid and valid field

input:required:invalid, input:focus:invalid { 
              border: 1px solid red;
            }
           
input:required:valid, input:focus:valid {
              border: 1px solid green;


